import React, { useState, useEffect } from 'react';
import { Outlet } from 'react-router-dom';
import styled from 'styled-components';
import Header from '../components/Header';

const Container = styled.div`
  display: flex;
  justify-content: center;
  padding: 20px;
  background: #f5f5f5;
  min-height: 100vh;
`;

const ContentWrapper = styled.div`
  display: flex;
  width: 100%;
  max-width: 1200px;
  gap: 20px;
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const TableSection = styled.div`
  flex: 2;
  background: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
`;

const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  text-align: left;
`;

const TableHeader = styled.th`
  padding: 10px;
  background: #f0f0f0;
  border-bottom: 2px solid #ddd;
`;

const TableRow = styled.tr`
  &:nth-child(even) { background: #fafafa; }
`;

const TableCell = styled.td`
  padding: 10px;
  border-bottom: 1px solid #ddd;
`;

const FormSection = styled.div`
  flex: 1;
  background: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
`;

const FormTitle = styled.h3`
  font-size: 18px;
  margin-bottom: 20px;
  text-align: center;
`;

const FormInput = styled.input`
  display: block;
  width: 100%;
  padding: 8px;
  margin-bottom: 15px;
  border: 1px solid ${props => props.valid ? '#006400' : '#ddd'};
  border-radius: 4px;
  background: ${props => props.valid ? '#90EE90' : 'transparent'};
  font-family: 'Montserrat', sans-serif;
  transition: all 0.3s ease;
`;

const FormSelect = styled.select`
  display: block;
  width: 100%;
  padding: 8px;
  margin-bottom: 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-family: 'Montserrat', sans-serif;
  background: ${props => props.selected ? '#00C853' : 'transparent'};
  color: ${props => props.selected ? '#fff' : '#000'};
  &:after {
    content: ${props => props.selected ? '"‚úì"' : '""'};
    margin-left: 5px;
    color: #fff;
  }
`;

const FilterSelect = styled.select`
  padding: 5px 10px;
  margin-right: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  background: ${props => props.selected ? '#00C853' : '#fff'};
  color: ${props => props.selected ? '#fff' : '#000'};
  font-family: 'Montserrat', sans-serif;
`;

const SortSelect = styled.select`
  padding: 5px 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  background: ${props => props.selected ? '#00C853' : '#fff'};
  color: ${props => props.selected ? '#fff' : '#000'};
  font-family: 'Montserrat', sans-serif;
`;

const FormButton = styled.button`
  width: 100%;
  padding: 10px;
  background: #00C853;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-family: 'Montserrat', sans-serif;
  font-size: 14px;
  cursor: pointer;
`;

const ActionIcons = styled.span`
  margin: 0 5px;
  cursor: pointer;
`;

const MainPage = () => {
  const [expenses, setExpenses] = useState([
    { id: 1, description: '–ü—è—Ç–µ—Ä–æ—á–∫–∞', category: '–ï–¥–∞', date: '03.07.2024', amount: '3 500 –†' },
    { id: 2, description: '–Ø–Ω–¥–µ–∫—Å –¢–∞–∫—Å–∏', category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', date: '03.07.2024', amount: '730 –†' },
    { id: 3, description: '–ê–ø—Ç–µ–∫–∞ –í–∏—Ç—è', category: '–î—Ä—É–≥–æ–µ', date: '03.07.2024', amount: '1 200 –†' },
    { id: 4, description: '–ë—É—Ä–≥–µ—Ä –ö–∏–Ω–≥', category: '–ï–¥–∞', date: '03.07.2024', amount: '950 –†' },
    { id: 5, description: '–î–µ–ª–∏–≤–µ—Ä–∏', category: '–ï–¥–∞', date: '02.07.2024', amount: '1 320 –†' },
    { id: 6, description: '–ö–æ—Ñ–µ–π–Ω—è ‚Ññ1', category: '–ï–¥–∞', date: '02.07.2024', amount: '400 –†' },
    { id: 7, description: '–ë–∏–ª–µ—Ç—ã', category: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', date: '29.06.2024', amount: '600 –†' },
    { id: 8, description: '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫', category: '–ï–¥–∞', date: '29.06.2024', amount: '2 360 –†' },
    { id: 9, description: '–õ—É–∫–æ–π–ª', category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', date: '29.06.2024', amount: '1 000 –†' },
    { id: 10, description: '–õ–µ—Ç—É–∞–ª—å', category: '–î—Ä—É–≥–æ–µ', date: '29.06.2024', amount: '4 300 –†' },
    { id: 11, description: '–Ø–Ω–¥–µ–∫—Å –¢–∞–∫—Å–∏', category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', date: '28.06.2024', amount: '320 –†' },
    { id: 12, description: '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫', category: '–ï–¥–∞', date: '28.06.2024', amount: '1 360 –†' },
    { id: 13, description: '–î–µ–ª–∏–≤–µ—Ä–∏', category: '–ï–¥–∞', date: '28.06.2024', amount: '2 320 –†' },
    { id: 14, description: '–í–∫—É—Å–≤–∏–ª–ª', category: '–ï–¥–∞', date: '27.06.2024', amount: '1 220 –†' },
    { id: 15, description: '–ö–æ—Ñ–µ–π–Ω—è ‚Ññ1', category: '–ï–¥–∞', date: '27.06.2024', amount: '920 –†' },
    { id: 16, description: '–í–∫—É—Å–≤–∏–ª–ª', category: '–ï–¥–∞', date: '26.06.2024', amount: '840 –†' },
    { id: 17, description: '–ö–æ—Ñ–µ–π–Ω—è ‚Ññ1', category: '–ï–¥–∞', date: '26.06.2024', amount: '920 –†' },
  ]);
   const [filterCategory, setFilterCategory] = useState('');
  const [sortBy, setSortBy] = useState('');
  const [formData, setFormData] = useState({
    description: '',
    category: '',
    date: '',
    amount: ''
  });

  useEffect(() => {
    let filteredExpenses = [...expenses]; // Create a copy to avoid direct mutation
    if (filterCategory) {
      filteredExpenses = filteredExpenses.filter(expense => expense.category === filterCategory);
    }
    if (sortBy === 'date') {
      filteredExpenses.sort((a, b) => new Date(a.date.split('.').reverse().join('-')) - new Date(b.date.split('.').reverse().join('-')));
    } else if (sortBy === 'amount') {
      filteredExpenses.sort((a, b) => parseInt(a.amount.replace(' –†', '')) - parseInt(b.amount.replace(' –†', '')));
    }
    // No need to setExpenses here; use filteredExpenses for display
  }, [filterCategory, sortBy]);

  const handleDelete = (id) => {
    setExpenses(expenses.filter(expense => expense.id !== id));
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const isValidInput = (value, field) => {
    if (field === 'amount') return value && !isNaN(value) && parseInt(value) > 0;
    return value.trim() !== '';
  };

  return (
    <>
      <Header currentPath="/" />
      <Container>
        <ContentWrapper>
          <TableSection>
            <h2 style={{ textAlign: 'center', marginBottom: '20px' }}>–¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤</h2>
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>
              <FilterSelect
                value={filterCategory}
                onChange={(e) => setFilterCategory(e.target.value)}
                selected={filterCategory !== ''}
              >
                <option value="">–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                <option value="–ï–¥–∞">–ï–¥–∞</option>
                <option value="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</option>
                <option value="–ñ–∏–ª—å–µ">–ñ–∏–ª—å–µ</option>
                <option value="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è">–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</option>
                <option value="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</option>
                <option value="–î—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</option>
              </FilterSelect>
              <SortSelect
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                selected={sortBy !== ''}
              >
                <option value="">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ</option>
                <option value="date">–ü–æ –¥–∞—Ç–µ</option>
                <option value="amount">–ü–æ —Å—É–º–º–µ</option>
              </SortSelect>
            </div>
            <Table>
              <thead>
                <tr>
                  <TableHeader>–û–ø–∏—Å–∞–Ω–∏–µ</TableHeader>
                  <TableHeader>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableHeader>
                  <TableHeader>–î–∞—Ç–∞</TableHeader>
                  <TableHeader>–°—É–º–º–∞</TableHeader>
                  <TableHeader>–î–µ–π—Å—Ç–≤–∏—è</TableHeader>
                </tr>
              </thead>
              <tbody>
                {expenses
                  .filter(expense => !filterCategory || expense.category === filterCategory)
                  .sort((a, b) => {
                    if (sortBy === 'date') return new Date(a.date.split('.').reverse().join('-')) - new Date(b.date.split('.').reverse().join('-'));
                    if (sortBy === 'amount') return parseInt(a.amount.replace(' –†', '')) - parseInt(b.amount.replace(' –†', ''));
                    return 0;
                  })
                  .map(expense => (
                  <TableRow key={expense.id}>
                    <TableCell>{expense.description}</TableCell>
                    <TableCell>{expense.category}</TableCell>
                    <TableCell>{expense.date}</TableCell>
                    <TableCell>{expense.amount}</TableCell>
                    <TableCell>
                      <ActionIcons role="img" aria-label="edit" onClick={() => window.location.href = `/spending/${expense.id}`}>‚úèÔ∏è</ActionIcons>
                      <ActionIcons role="img" aria-label="delete" onClick={() => handleDelete(expense.id)}>üóëÔ∏è</ActionIcons>
                    </TableCell>
                  </TableRow>
                ))}
              </tbody>
            </Table>
          </TableSection>
          <FormSection>
            <FormTitle>–ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥</FormTitle>
            <FormInput
              name="description"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
              value={formData.description}
              onChange={handleInputChange}
              valid={isValidInput(formData.description, 'description')}
            />
            <FormSelect
              name="category"
              value={formData.category}
              onChange={handleInputChange}
              selected={formData.category !== ''}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
              <option value="–ï–¥–∞">–ï–¥–∞</option>
              <option value="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</option>
              <option value="–ñ–∏–ª—å–µ">–ñ–∏–ª—å–µ</option>
              <option value="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è">–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</option>
              <option value="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</option>
              <option value="–î—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</option>
            </FormSelect>
            <FormInput
              type="date"
              name="date"
              value={formData.date}
              onChange={handleInputChange}
              valid={isValidInput(formData.date, 'date')}
            />
            <FormInput
              name="amount"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
              value={formData.amount}
              onChange={handleInputChange}
              valid={isValidInput(formData.amount, 'amount')}
            />
            <FormButton onClick={() => window.location.href = '/spending/new'}>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥</FormButton>
          </FormSection>
        </ContentWrapper>
        <Outlet />
      </Container>
    </>
  );
};

export default MainPage;